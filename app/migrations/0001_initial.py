# Generated by Django 4.2.18 on 2025-02-09 18:56

import app.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DepartmentID', models.CharField(max_length=10, unique=True)),
                ('DepartmentName', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DoctorID', models.CharField(editable=False, max_length=10, unique=True)),
                ('FirstName', models.CharField(max_length=100)),
                ('LastName', models.CharField(max_length=100)),
                ('DoctorEmail', models.EmailField(max_length=100, unique=True)),
                ('DoctorGender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('DoctorAge', models.IntegerField(validators=[django.core.validators.MinValueValidator(25), django.core.validators.MaxValueValidator(80)])),
                ('DoctorPhone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('DoctorAddress', models.TextField()),
                ('Specialization', models.CharField(max_length=100)),
                ('Experience', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'ordering': ['LastName', 'FirstName'],
            },
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('MedicineID', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=255)),
                ('MedicalType', models.CharField(max_length=255)),
                ('BuyPrice', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('SellPrice', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('BatchNo', models.CharField(max_length=255)),
                ('ShelfNo', models.CharField(max_length=255)),
                ('ExpireDate', models.DateField()),
                ('ManufacturingDate', models.DateField()),
                ('Description', models.TextField(blank=True)),
                ('InStockTotal', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('UpdatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PatientID', models.CharField(default=app.models.generate_patient_id, editable=False, max_length=10, unique=True)),
                ('FirstName', models.CharField(max_length=100)),
                ('LastName', models.CharField(max_length=100)),
                ('DateOfBirth', models.DateField()),
                ('PatientEmail', models.EmailField(max_length=100, unique=True)),
                ('PatientGender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('PatientAge', models.IntegerField(help_text="Patient's age between 0 and 150 years", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
                ('PatientPhone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('Address', models.TextField()),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
                'ordering': ['LastName', 'FirstName'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PrescriptionID', models.CharField(max_length=10, unique=True)),
                ('Date', models.DateField()),
                ('Time', models.TimeField()),
                ('Dosage', models.CharField(max_length=100)),
                ('Frequency', models.CharField(max_length=100)),
                ('Refills', models.IntegerField()),
                ('Instructions', models.TextField()),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('UpdatedAt', models.DateTimeField(auto_now=True)),
                ('DoctorID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.doctor')),
                ('MedicineID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.medicine')),
                ('PatientID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Billing',
            fields=[
                ('BillID', models.AutoField(primary_key=True, serialize=False)),
                ('TotalCost', models.DecimalField(decimal_places=2, help_text='Total cost in dollars', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('PaymentStatus', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid'), ('OVERDUE', 'Overdue'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=100)),
                ('DateOfBill', models.DateField()),
                ('DueDate', models.DateField()),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('UpdatedAt', models.DateTimeField(auto_now=True)),
                ('PatientID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.patient')),
            ],
            options={
                'verbose_name': 'Billing',
                'verbose_name_plural': 'Billings',
                'ordering': ['-DateOfBill'],
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AppointmentID', models.CharField(max_length=10, unique=True)),
                ('Status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('CONFIRMED', 'Confirmed'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=10)),
                ('Date', models.DateField()),
                ('Time', models.TimeField()),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('BookedOn', models.DateField(auto_now=True)),
                ('Doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.doctor')),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='app.patient')),
            ],
            options={
                'ordering': ['-Date', '-Time'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('Username', models.CharField(max_length=150, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('doctor', 'Doctor'), ('patient', 'Patient')], max_length=50)),
                ('Email', models.EmailField(blank=True, max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.AddConstraint(
            model_name='appointment',
            constraint=models.UniqueConstraint(fields=('Doctor', 'Date', 'Time'), name='Unique_Appointment'),
        ),
    ]
